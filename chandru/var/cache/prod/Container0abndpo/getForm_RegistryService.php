<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'form.registry' shared service.

include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/FormRegistryInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/FormRegistry.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/FormExtensionInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Extension/DependencyInjection/DependencyInjectionExtension.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/ResolvedFormTypeFactoryInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/ResolvedFormTypeFactory.php';

return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\ServiceLocator(array('AppBundle\\Form\\CashdiscountType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\CashdiscountType']) ? $this->services['AppBundle\Form\CashdiscountType'] : $this->services['AppBundle\Form\CashdiscountType'] = new \AppBundle\Form\CashdiscountType()) && false ?: '_'};
}, 'AppBundle\\Form\\CategoryType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\CategoryType']) ? $this->services['AppBundle\Form\CategoryType'] : $this->services['AppBundle\Form\CategoryType'] = new \AppBundle\Form\CategoryType()) && false ?: '_'};
}, 'AppBundle\\Form\\ChangepasswordType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\ChangepasswordType']) ? $this->services['AppBundle\Form\ChangepasswordType'] : $this->services['AppBundle\Form\ChangepasswordType'] = new \AppBundle\Form\ChangepasswordType()) && false ?: '_'};
}, 'AppBundle\\Form\\ChangepstatusType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\ChangepstatusType']) ? $this->services['AppBundle\Form\ChangepstatusType'] : $this->services['AppBundle\Form\ChangepstatusType'] = new \AppBundle\Form\ChangepstatusType()) && false ?: '_'};
}, 'AppBundle\\Form\\CreateinvoiceType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\CreateinvoiceType']) ? $this->services['AppBundle\Form\CreateinvoiceType'] : $this->services['AppBundle\Form\CreateinvoiceType'] = new \AppBundle\Form\CreateinvoiceType()) && false ?: '_'};
}, 'AppBundle\\Form\\CustomerType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\CustomerType']) ? $this->services['AppBundle\Form\CustomerType'] : $this->services['AppBundle\Form\CustomerType'] = new \AppBundle\Form\CustomerType()) && false ?: '_'};
}, 'AppBundle\\Form\\ExpansesType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\ExpansesType']) ? $this->services['AppBundle\Form\ExpansesType'] : $this->services['AppBundle\Form\ExpansesType'] = new \AppBundle\Form\ExpansesType()) && false ?: '_'};
}, 'AppBundle\\Form\\ImagebrowserType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\ImagebrowserType']) ? $this->services['AppBundle\Form\ImagebrowserType'] : $this->services['AppBundle\Form\ImagebrowserType'] = new \AppBundle\Form\ImagebrowserType()) && false ?: '_'};
}, 'AppBundle\\Form\\InvoiceamountType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\InvoiceamountType']) ? $this->services['AppBundle\Form\InvoiceamountType'] : $this->services['AppBundle\Form\InvoiceamountType'] = new \AppBundle\Form\InvoiceamountType()) && false ?: '_'};
}, 'AppBundle\\Form\\MySearchType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\MySearchType']) ? $this->services['AppBundle\Form\MySearchType'] : $this->services['AppBundle\Form\MySearchType'] = new \AppBundle\Form\MySearchType()) && false ?: '_'};
}, 'AppBundle\\Form\\MySearchyearType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\MySearchyearType']) ? $this->services['AppBundle\Form\MySearchyearType'] : $this->services['AppBundle\Form\MySearchyearType'] = new \AppBundle\Form\MySearchyearType()) && false ?: '_'};
}, 'AppBundle\\Form\\MyinvoiceitemType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\MyinvoiceitemType']) ? $this->services['AppBundle\Form\MyinvoiceitemType'] : $this->services['AppBundle\Form\MyinvoiceitemType'] = new \AppBundle\Form\MyinvoiceitemType()) && false ?: '_'};
}, 'AppBundle\\Form\\MypinvoiceitemType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\MypinvoiceitemType']) ? $this->services['AppBundle\Form\MypinvoiceitemType'] : $this->services['AppBundle\Form\MypinvoiceitemType'] = new \AppBundle\Form\MypinvoiceitemType()) && false ?: '_'};
}, 'AppBundle\\Form\\PinvoiceType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\PinvoiceType']) ? $this->services['AppBundle\Form\PinvoiceType'] : $this->services['AppBundle\Form\PinvoiceType'] = new \AppBundle\Form\PinvoiceType()) && false ?: '_'};
}, 'AppBundle\\Form\\PinvoiceamountType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\PinvoiceamountType']) ? $this->services['AppBundle\Form\PinvoiceamountType'] : $this->services['AppBundle\Form\PinvoiceamountType'] = new \AppBundle\Form\PinvoiceamountType()) && false ?: '_'};
}, 'AppBundle\\Form\\ProductType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\ProductType']) ? $this->services['AppBundle\Form\ProductType'] : $this->services['AppBundle\Form\ProductType'] = new \AppBundle\Form\ProductType()) && false ?: '_'};
}, 'AppBundle\\Form\\StateType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\StateType']) ? $this->services['AppBundle\Form\StateType'] : $this->services['AppBundle\Form\StateType'] = new \AppBundle\Form\StateType()) && false ?: '_'};
}, 'AppBundle\\Form\\SupplierType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\SupplierType']) ? $this->services['AppBundle\Form\SupplierType'] : $this->services['AppBundle\Form\SupplierType'] = new \AppBundle\Form\SupplierType()) && false ?: '_'};
}, 'AppBundle\\Form\\UnitType' => function () {
    return ${($_ = isset($this->services['AppBundle\Form\UnitType']) ? $this->services['AppBundle\Form\UnitType'] : $this->services['AppBundle\Form\UnitType'] = new \AppBundle\Form\UnitType()) && false ?: '_'};
}, 'FOS\\CKEditorBundle\\Form\\Type\\CKEditorType' => function () {
    return ${($_ = isset($this->services['fos_ck_editor.form.type']) ? $this->services['fos_ck_editor.form.type'] : $this->load('getFosCkEditor_Form_TypeService.php')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType' => function () {
    return ${($_ = isset($this->services['fos_user.change_password.form.type']) ? $this->services['fos_user.change_password.form.type'] : $this->services['fos_user.change_password.form.type'] = new \FOS\UserBundle\Form\Type\ChangePasswordFormType('AppBundle\\Entity\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ProfileFormType' => function () {
    return ${($_ = isset($this->services['fos_user.profile.form.type']) ? $this->services['fos_user.profile.form.type'] : $this->services['fos_user.profile.form.type'] = new \FOS\UserBundle\Form\Type\ProfileFormType('AppBundle\\Entity\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\RegistrationFormType' => function () {
    return ${($_ = isset($this->services['fos_user.registration.form.type']) ? $this->services['fos_user.registration.form.type'] : $this->services['fos_user.registration.form.type'] = new \FOS\UserBundle\Form\Type\RegistrationFormType('AppBundle\\Entity\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ResettingFormType' => function () {
    return ${($_ = isset($this->services['fos_user.resetting.form.type']) ? $this->services['fos_user.resetting.form.type'] : $this->services['fos_user.resetting.form.type'] = new \FOS\UserBundle\Form\Type\ResettingFormType('AppBundle\\Entity\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\UsernameFormType' => function () {
    return ${($_ = isset($this->services['fos_user.username_form_type']) ? $this->services['fos_user.username_form_type'] : $this->load('getFosUser_UsernameFormTypeService.php')) && false ?: '_'};
}, 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => function () {
    return ${($_ = isset($this->services['form.type.entity']) ? $this->services['form.type.entity'] : $this->load('getForm_Type_EntityService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => function () {
    return ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->load('getForm_Type_ChoiceService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => function () {
    return ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->load('getForm_Type_FormService.php')) && false ?: '_'};
}, 'Vich\\UploaderBundle\\Form\\Type\\VichFileType' => function () {
    return ${($_ = isset($this->services['vich_uploader.form.type.file']) ? $this->services['vich_uploader.form.type.file'] : $this->load('getVichUploader_Form_Type_FileService.php')) && false ?: '_'};
}, 'Vich\\UploaderBundle\\Form\\Type\\VichImageType' => function () {
    return ${($_ = isset($this->services['vich_uploader.form.type.image']) ? $this->services['vich_uploader.form.type.image'] : $this->load('getVichUploader_Form_Type_ImageService.php')) && false ?: '_'};
})), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->load('getForm_TypeExtension_Form_HttpFoundationService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->load('getForm_TypeExtension_Form_ValidatorService.php')) && false ?: '_'};
    yield 2 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->load('getForm_TypeExtension_Upload_ValidatorService.php')) && false ?: '_'};
    yield 3 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->load('getForm_TypeExtension_CsrfService.php')) && false ?: '_'};
}, 4), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()) && false ?: '_'};
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()) && false ?: '_'};
}, 1)), new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->load('getForm_TypeGuesser_ValidatorService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_guesser.doctrine']) ? $this->services['form.type_guesser.doctrine'] : $this->load('getForm_TypeGuesser_DoctrineService.php')) && false ?: '_'};
}, 2), NULL)), ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\ResolvedFormTypeFactory()) && false ?: '_'});
